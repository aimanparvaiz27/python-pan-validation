# -*- coding: utf-8 -*-
"""Pan_Card_Validation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CNtoB1k9LYAbtJqA84OFIdp9dITYCL4M
"""

# Import Library
import pandas as pd
import re

# read excel file
df = pd.read_excel(r"/content/PAN Number Validation Dataset.xlsx")
df

total_records = len(df)
total_records

"""**Data Cleaning and Preprocessing**

"""

df.shape
print("The lenght of the dataset:", len(df))

# Convert the data type into string
df['Pan_Numbers'] = df['Pan_Numbers'].astype('string')
df['Pan_Numbers']

# Remove the spaces from pan numbers and convert them into uppercase
df['Pan_Numbers'] = df['Pan_Numbers'].str.strip().str.upper()
df['Pan_Numbers']
Total_records = len(df)

print("The null pan numbers:", df['Pan_Numbers'].isnull().sum())
print("The total pan numbers:", len(df['Pan_Numbers']))
print("The unique pan numbers:", (df['Pan_Numbers'].nunique()))
print("The dupliacte pan numbers:", df['Pan_Numbers'].duplicated().sum())

# Remove the duplicate values
print(df.drop_duplicates(subset=['Pan_Numbers'], inplace=True))
print("The dupliacte pan numbers:", df['Pan_Numbers'].duplicated().sum())
print("The total pan numbers:", len(df['Pan_Numbers']))

df = df.replace({"Pan_Numbers":''}, pd.NA).dropna(subset="Pan_Numbers")
df

print("The total pan numbers:", len(df['Pan_Numbers']))
print("The unique pan numbers:", (df['Pan_Numbers'].nunique()))

"""**Validation**"""

# Adjacent characters(alphabets) cannot be the same (like AABCD is invalid; AXBCD is valid)

def has_adjacent_repition(pan_number):
  for i in range(len(pan_number)-1):
    if pan_number[i] == pan_number[i+1]:
      return True
  return False

print(has_adjacent_repition('AABCD'))
print(has_adjacent_repition('ABRRDX'))
print(has_adjacent_repition('ABCDE'))

# All five characters cannot form a sequence (like: ABCDE, BCDEF is invalid; ABCDX is valid)

def is_sequential(pan_number):
  for i in range(len(pan_number)-1):
    if ord(pan_number[i+1]) - ord(pan_number[i]) != 1:
      return False
  return True
print(is_sequential('ABCDE'))
print(is_sequential('ABCC'))

# PAN Format Validation: A valid PAN number follows the format:
 # The format is as follows: AAAAA1234A
 # The first five characters should be alphabetic (uppercase letters)

# It is exactly 10 characters long.
def is_valid(pan_number):
  if len(pan_number) !=10:
    return False
  if not re.match(r"^[A-Z]{5}[0-9]{4}[A-Z]$", pan_number):
    return False
  if has_adjacent_repition(pan_number):
    return False
  if is_sequential(pan_number):
    return False
  return True
df['Status'] = df['Pan_Numbers'].apply(lambda x: "Valid" if is_valid(x) else "Invalid")
df.head(10)

valid_count = (df['Status']=='Valid').sum()
in_valid_count = (df['Status']=='Invalid').sum()
missing_count = total_records - (valid_count+in_valid_count)
print("The total records:", total_records)
print("The valid pan number:", valid_count)
print("The invalid pan number:", in_valid_count)
print("The invalid missing_count:", missing_count)

df_summary = pd.DataFrame({"Total processed records": [total_records],
                           "Valid_records": [valid_count],
                           "Invalid_records": [in_valid_count],
                           "Missing_records": [missing_count]
                           })
print(df_summary)
with pd.ExcelWriter('output.xlsx') as writer:
  df.to_excel(writer, sheet_name='Output', index=False)
  df.to_excel(writer, sheet_name="Pan_Validations", index=False)
  df_summary.to_excel(writer, sheet_name="Summary", index=False)